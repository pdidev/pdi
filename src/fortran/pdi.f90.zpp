!******************************************************************************
! Copyright (C) 2015-2020 Commissariat a l'energie atomique et aux energies alternatives (CEA)
! Copyright (C) 2021 Centre national de la recherche scientifique (CNRS)
! All rights reserved.
!
! Redistribution and use in source and binary forms, with or without
! modification, are permitted provided that the following conditions are met:
! * Redistributions of source code must retain the above copyright
!   notice, this list of conditions and the following disclaimer.
! * Redistributions in binary form must reproduce the above copyright
!   notice, this list of conditions and the following disclaimer in the
!   documentation and/or other materials provided with the distribution.
! * Neither the name of CEA nor the names of its contributors may be used to
!   endorse or promote products derived from this software without specific
!   prior written permission.
!
! THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
! IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
! FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
! AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
! LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
! OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
! THE SOFTWARE.
!******************************************************************************

!$SH source fortran.zpp.sh
!$SH MAXDIM=7


module PDI

  use paraconf

  implicit none

include 'pdif.h'

endmodule PDI


subroutine PDI_init(treeconf, err)

  use PDI_C

  implicit none

  type(PC_tree_t), intent(IN) :: treeconf
  integer, intent(OUT), optional :: err

  integer :: tmperr

  tmperr = int(PDI_init_C(treeconf))
  
  if(present(err)) then
    err = tmperr
  endif
  
endsubroutine PDI_init


subroutine PDI_finalize(err)

  use PDI_C

  implicit none

  integer, intent(OUT), optional :: err

  integer :: tmperr

  tmperr = int(PDI_finalize_C())
  
  if(present(err)) then
    err = tmperr
  endif
  
endsubroutine PDI_finalize


subroutine PDI_event(event, err)

  use PDI_C

  implicit none

  character(len=*), intent(IN) :: event
  integer, intent(OUT), optional :: err

  character(C_char), target :: C_event(len_trim(event)+1)
  integer :: ii, tmperr

  do ii=1, len_trim(event)
    C_event(ii) = event(ii:ii)
  enddo
  C_event(len_trim(event)+1) = C_null_char

  tmperr = int(PDI_event_C(C_loc(C_event)))
  
  if(present(err)) then
    err = tmperr
  endif
  
endsubroutine PDI_event



subroutine PDI_share(name, data, accessf, err)  

  use PDI_C

  implicit none

  character(len=*), intent(IN) :: name
  TYPE(*), target, asynchronous :: data(..)
  integer, intent(IN) :: accessf
  integer, intent(OUT), optional :: err

  character(C_char), target :: C_name(len_trim(name)+1)
  integer :: ii, tmperr

  do ii=1, len_trim(name)
    C_name(ii) = name(ii:ii)
  enddo
  C_name(len_trim(name)+1) = C_null_char

  tmperr = int(PDI_share_C(C_loc(C_name), C_loc(data), accessf))

  if(present(err)) then
    err = tmperr
  endif
  return
end subroutine PDI_share



subroutine PDI_release(name, err)

  use PDI_C

  implicit none

  character(len=*), intent(IN) :: name
  integer, intent(OUT), optional :: err

  character(C_char), target :: C_name(len_trim(name)+1)
  integer :: ii, tmperr

  do ii=1, len_trim(name)
    C_name(ii) = name(ii:ii)
  enddo
  C_name(len_trim(name)+1) = C_null_char

  tmperr = int(PDI_release_C(C_loc(C_name)))
  
  if(present(err)) then
    err = tmperr
  endif
  
endsubroutine PDI_release


subroutine PDI_reclaim(name, err)

  use PDI_C

  implicit none

  character(len=*), intent(IN) :: name
  integer, intent(OUT), optional :: err

  character(C_char), target :: C_name(len_trim(name)+1)
  integer :: ii, tmperr

  do ii=1, len_trim(name)
    C_name(ii) = name(ii:ii)
  enddo
  C_name(len_trim(name)+1) = C_null_char

  tmperr = int(PDI_reclaim_C(C_loc(C_name)))
  
  if(present(err)) then
    err = tmperr
  endif
  
endsubroutine PDI_reclaim



subroutine PDI_expose(name, data, accessf, err)

  use PDI_C

  implicit none

  character(len=*), intent(IN) :: name
  TYPE(*), target, asynchronous :: data(..)
  integer, intent(IN) :: accessf
  integer, intent(OUT), optional :: err

  character(C_char), target :: C_name(len_trim(name)+1)
  integer :: ii, tmperr

  do ii=1, len_trim(name)
    C_name(ii) = name(ii:ii)
  enddo
  C_name(len_trim(name)+1) = C_null_char
  
  tmperr = int(PDI_expose_C(C_loc(C_name), C_loc(data), accessf))
  
  if(present(err)) then
    err = tmperr
  endif
  
endsubroutine PDI_expose


!$SH for T in ${FORTTYPES}; do
!$SH   for D in $(seq 0 ${MAXDIM}); do

subroutine PDI_access_${T}_${D}D(name, ptr_data, accessf, &
!$SH     if [ 0 -lt "$D" ]; then
    ptr_data_shape, &
!$SH     fi
    err)

  use PDI_C

  implicit none

  character(len=*), intent(IN) :: name
  $(fort_type $T), pointer &
!$SH     if [ "$D" -gt 0 ]; then
  , contiguous &
!$SH     fi
  :: ptr_data$(array_desc $D)
  integer, intent(IN) :: accessf
!$SH     if [ 0 -lt "$D" ]; then
  integer, intent(IN) :: ptr_data_shape($D)
!$SH     fi
  integer, intent(OUT), optional :: err

  character(C_char), target :: C_name(len_trim(name)+1)
  type(C_ptr) :: C_ptr_data
  integer :: ii, tmperr

  do ii=1, len_trim(name)
    C_name(ii) = name(ii:ii)
  enddo
  C_name(len_trim(name)+1) = C_null_char

  tmperr = int(PDI_access_C(C_loc(C_name), &
      C_ptr_data, &
      accessf))
  call c_f_pointer(C_ptr_data, ptr_data &
!$SH     if [ 0 -lt "$D" ]; then
      , ptr_data_shape &
!$SH     fi
      )
  
  if(present(err)) then
    err = tmperr
  endif
  
endsubroutine PDI_access_${T}_${D}D

!$SH   done
!$SH done

subroutine PDI_transaction_begin(name, err)

  use PDI_C

  implicit none

  character(len=*), intent(IN) :: name
  integer, intent(OUT), optional :: err

  character(C_char), target :: C_name(len_trim(name)+1)
  integer :: ii, tmperr

  do ii=1, len_trim(name)
    C_name(ii) = name(ii:ii)
  enddo
  C_name(len_trim(name)+1) = C_null_char

  tmperr = int(PDI_transaction_begin_C(C_loc(C_name)))
  
  if(present(err)) then
    err = tmperr
  endif
  
endsubroutine PDI_transaction_begin


subroutine PDI_transaction_end(err)

  use PDI_C

  implicit none

  integer, intent(OUT), optional :: err

  integer :: tmperr

  tmperr = int(PDI_transaction_end_C())
  
  if(present(err)) then
    err = tmperr
  endif
  
endsubroutine PDI_transaction_end
