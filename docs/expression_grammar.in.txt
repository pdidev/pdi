/* parsing as a REFERENCE is preferred over OPERATION
   parsing as an OPERATION is preferred over STRING_LITERAL
*/
EXPRESSION     := REFERENCE | OPERATION | STRING_LITERAL

STRING_LITERAL := ( CHAR | '\' '\' | '\' '$'
                  | REFERENCE
                  | '$' '(' OPERATION ')'
                  )*

/* The operator descending precedence order is:
   1. *, /, %: multiplication, division and modulo,
   2. +, -: addition and subtraction,
   3. <, >: less than and greater than,
   4. =: equality,
   5. &: logical AND,
   6. |: logical OR.
*/
OPERATION      := TERM ( OPERATOR TERM )*

TERM           := ( INT_LITERAL | REFERENCE | '(' OPERATION ')' )

REFERENCE      := '$' ( IREFERENCE | '{' IREFERENCE '}' )

IREFERENCE     := ID ( '[' OPERATION ']' | '.' ID )*



INT_LITERAL ~= (0x)? [0-9]+ ( \.  )
ID          ~= [a-zA-Z_][a-zA-Z0-9_]*
CHAR        ~= [^$\\]
OPERATOR    ~= [|&=<>+\-\*/%]
