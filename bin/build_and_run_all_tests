#!/bin/bash
#=============================================================================
# Copyright (C) 2022-2025 Commissariat a l'energie atomique et aux energies alternatives (CEA)
# Copyright (C) 2020 Institute of Bioorganic Chemistry Polish Academy of Science (PSNC)
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the names of CEA, nor the names of the contributors may be used to
#   endorse or promote products derived from this software without specific
#   prior written  permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#=============================================================================

set -xe



# Make our work dirs

SRCDIR="${PWD}"

TEST_DIR_WITH_PDI="${TEST_DIR_WITH_PDI:-${PWD}}"
cd "${TEST_DIR_WITH_PDI}"
cd "$(mktemp -d pdibuild.XXXXX)"
TEST_DIR_ROOT="${PWD}"

mkdir no_pdi
cd no_pdi
TEST_DIR_NO_PDI="${PWD}"

cd "${TEST_DIR_ROOT}"
mkdir with_pdi
cd with_pdi
TEST_DIR_WITH_PDI="${PWD}"

cd "${TEST_DIR_ROOT}"
mkdir api_pdi
cd api_pdi
TEST_DIR_API="${PWD}"

cd "${TEST_DIR_ROOT}"
mkdir build_paraconf
cd build_paraconf
BUILD_DIR_PARACONF="${PWD}"

cd "${SRCDIR}"
cd "$(dirname "$0")/.."
SRCDIR="${PWD}"



# Gather options

MAKEFLAGS="${MAKEFLAGS:--j}"
EXCLUDED_PDI_TESTS=""

if [[ -n "${PDI_PLUGIN_PATH}" ]]
then
	CMAKE_FLAGS="${CMAKE_FLAGS} -DINSTALL_PDIPLUGINDIR=${PDI_PLUGIN_PATH}"
fi

if [[ "x${PDI_LIBS}" = "xprovided" ]]
then
	CMAKE_FLAGS="${CMAKE_FLAGS} -DUSE_DEFAULT=SYSTEM"
else
	CMAKE_FLAGS="${CMAKE_FLAGS} -DUSE_DEFAULT=EMBEDDED"
fi



# Various workarounds

NC_VERSION_MAJOR="$(nc-config --version | sed 's/^[a-zA-Z ]*\([0-9]*\)\.\([0-9]*\).*$/\1/')"
NC_VERSION_MINOR="$(nc-config --version | sed 's/^[a-zA-Z ]*\([0-9]*\)\.\([0-9]*\).*$/\2/')"
if (( NC_VERSION_MAJOR > 4 || ( NC_VERSION_MAJOR == 4 && NC_VERSION_MINOR > 8 ) )) || [[ "x${PDI_LIBS}" != "xprovided" ]]
then
	#TODO: NetCDF error https://gitlab.maisondelasimulation.fr/pdidev/pdi/-/issues/433
	EXCLUDED_PDI_TESTS="${EXCLUDED_PDI_TESTS:+$EXCLUDED_PDI_TESTS|}test_05_C"
fi

if [[ "x${PDI_SYSTEM}" =~ ^x(ubuntu|debian) && "x${PDI_MPI}" = "xmpich" ]]
then
	#Workaround: mpi4py in debuntu is packaged for openmpi only
	EXCLUDED_PDI_TESTS="${EXCLUDED_PDI_TESTS:+$EXCLUDED_PDI_TESTS|}PDI_example_trace_P|PDI_example_decl_hdf5_P"
fi

if [[ "x${PDI_SYSTEM}" =~ ^xubuntu && "x${PDI_MPI}" = "xmpich" ]] && dpkg -s mpich | grep -q 4.2.0-5
then
	#Workaround: mpich is broken in ubuntu noble and launches independent processes
	#Due to https://bugs.launchpad.net/ubuntu/+source/mpich/+bug/2072338
	EXCLUDED_PDI_TESTS="${EXCLUDED_PDI_TESTS:+$EXCLUDED_PDI_TESTS|}mpi|decl_hdf5_02_F|decl_hdf5_03_F|decl_hdf5_04_F|PDI_example"
fi

# if [[ "x${PDI_SYSTEM}" =~ ^xdebian && "x${PDI_MPI}" = "xopenmpi" ]] && dpkg -s libpmix2t64 | grep -q 5.0.3-1
# then
# 	#Workaround: libpmix2t64 is broken in debian-unstable and openmpi fails to find libpmix.so.2
# 	#Due to https://bugs-devel.debian.org/cgi-bin/bugreport.cgi?bug=1076148
# 	EXCLUDED_PDI_TESTS="${EXCLUDED_PDI_TESTS:+$EXCLUDED_PDI_TESTS|}mpi|decl_hdf5_02_F|decl_hdf5_03_F|decl_hdf5_04_F|PDI_example"
# fi

if [[ "x${PDI_SYSTEM}" =~ ^x(ubuntu|debian) && "x${PDI_LIBS}" = "xprovided" ]]
then
	#Workaround: parallel NetCDF detection broken in debuntu (and absent in mpich case)
	CMAKE_FLAGS="${CMAKE_FLAGS} -DBUILD_NETCDF_PARALLEL=OFF"
fi


# Configure, build & test for no-pdi's specific tests with BUILD_WITHOUT_PDI (include_directories), without Paraconf

cd "${TEST_DIR_API}"
RELATIVE_MODULE_PATH="no-pdi"
NO_PDI_TESTS="test_api_C test_api_CXX"
cmake -DBUILD_BENCHMARKING=OFF -DBUILD_UNSTABLE=OFF -DBUILD_DECL_HDF5_PLUGIN=OFF -DBUILD_DECL_NETCDF_PLUGIN=OFF -DCMAKE_PREFIX_PATH="${SRCDIR}/${RELATIVE_MODULE_PATH}" -DBUILD_WITH_PARACONF=OFF -DBUILD_SERIALIZE_PLUGIN=OFF -DBUILD_SET_VALUE_PLUGIN=OFF -DDIST_PROFILE=Devel ${CMAKE_FLAGS} "${SRCDIR}/tests"
make ${MAKEFLAGS}
ldd test_api_C
ctest --output-on-failure --timeout 90 ${CTEST_FLAGS} -R ${NO_PDI_TESTS}

echo "############ test-api no-pdi/no-paraconf done"

# Get Paraconf independently from pdi
# # cd "${SRCDIR}/vendor/paraconf*/"
# cd "${SRCDIR}"
# ls .
# cd vendor/paraconf*/
# mkdir build
# cd build
# cmake -DUSE_SYSTEM_YAML=OFF ..
# make
# make install

# cd "${BUILD_DIR_PARACONF}"
# # ls ${SRCDIR}/vendor
# # ls ${SRCDIR}/vendor/paraconf*
# # ls ${SRCDIR}/vendor/paraconf*/vendor
# ls ${SRCDIR}/vendor/paraconf*/vendor/libyaml-0.2.2
# # cmake -DCMAKE_INSTALL_PREFIX="./install_paraconf" -DUSE_SYSTEM_YAML=OFF ${SRCDIR}/vendor/paraconf*
# # cmake -DCMAKE_INSTALL_PREFIX="./install_paraconf" ${SRCDIR}/vendor/paraconf*
# cmake -DCMAKE_PREFIX_PATH=${SRCDIR}/vendor/paraconf*/vendor/libyaml* -DCMAKE_INSTALL_PREFIX="./install_paraconf" ${SRCDIR}/vendor/paraconf*
# make ${MAKEFLAGS}
# make install

# cd "${BUILD_DIR_PARACONF}"
# PARACONF_SRC=( ${SRCDIR}/vendor/paraconf* )
# LIBYAML_DIR=( ${SRCDIR}/vendor/paraconf*/vendor/libyaml* )
# ls "${LIBYAML_DIR[0]}"
# if [[ ${#PARACONF_SRC[@]} -ne 1 ]] || [[ ${#LIBYAML_DIR[@]} -ne 1 ]]; then
#     echo "Error: paraconf* or libyaml* did not match exactly one directory"
#     exit 1
# fi
# cmake \
#   -DCMAKE_PREFIX_PATH="${LIBYAML_DIR[0]}" \
#   -DCMAKE_INSTALL_PREFIX="./install_paraconf" \
#   "${PARACONF_SRC[0]}"
# make ${MAKEFLAGS}
# make install

cd "${BUILD_DIR_PARACONF}"
# git clone git@github.com:pdidev/paraconf.git
# wget https://github.com/pdidev/paraconf/archive/1.0.0.tar.gz
# tar -xzf 1.0.0.tar.gz
# mv paraconf-1.0.0 paraconf
cp -r ${SRCDIR}/vendor/paraconf*/ .
cd paraconf*
# sed EMBEDDED_PATH "vendor/libyaml-0.2.2.tar"*
ls vendor/libyaml*
echo "---"
# sed -i "s|EMBEDDED_PATH \"vendor/libyaml-0.2.2.tar\"|EMBEDDED_PATH \"$(ls vendor/libyaml-*)\"|" CMakeLists.txt
sed -i "s|EMBEDDED_PATH \"vendor/libyaml-0.2.2.tar\"|EMBEDDED_PATH \"$(basename "$(ls vendor/libyaml-*.tar)" .tar)\"|" CMakeLists.txt
mkdir build
cd build
cmake -DUSE_SYSTEM_YAML=OFF -DCMAKE_INSTALL_PREFIX="./install_paraconf" ..
make
make install

echo "############ got paraconf"

# Configure, build & test for no-pdi's specific tests with CMAKE_PREFIX_PATH (find_package), with Paraconf

cd "${TEST_DIR_NO_PDI}"
RELATIVE_MODULE_PATH="no-pdi"
cmake -DBUILD_BENCHMARKING=OFF -DBUILD_FORTRAN=OFF -DBUILD_DECL_HDF5_PLUGIN=OFF -DBUILD_DECL_NETCDF_PLUGIN=OFF -DCMAKE_PREFIX_PATH="${SRCDIR}/${RELATIVE_MODULE_PATH}" -DDIST_PROFILE=Devel ${CMAKE_FLAGS} "${SRCDIR}/example"
make ${MAKEFLAGS}
ldd PDI_example_C
ctest --output-on-failure --timeout 90 ${CTEST_FLAGS} -R PDI_example_C

echo "############ example no-pdi/paraconf done"

cd "${TEST_DIR_API}"
NO_PDI_TESTS="test_api_C test_api_CXX"
cmake -DBUILD_BENCHMARKING=OFF -DBUILD_FORTRAN=OFF -DBUILD_DECL_HDF5_PLUGIN=OFF -DBUILD_DECL_NETCDF_PLUGIN=OFF -DCMAKE_PREFIX_PATH="${SRCDIR}/${RELATIVE_MODULE_PATH}" -DDIST_PROFILE=Devel ${CMAKE_FLAGS} "${SRCDIR}/tests"
make ${MAKEFLAGS}
ldd test_api_C
ctest --output-on-failure --timeout 90 ${CTEST_FLAGS} -R ${NO_PDI_TESTS}
rm -rf CMakeCache.txt CMakeFiles/ cmake_install.cmake Makefile

echo "############ test-api no-pdi/paraconf done"

# Configure, build & test for pdi, with Paraconf

cd "${TEST_DIR_WITH_PDI}"
cmake -DBUILD_BENCHMARKING=OFF -DDIST_PROFILE=Devel ${CMAKE_FLAGS} "${SRCDIR}"
make ${MAKEFLAGS}
ls .
ctest --output-on-failure --timeout 90 ${CTEST_FLAGS} ${EXCLUDED_PDI_TESTS:+-E $EXCLUDED_PDI_TESTS}

echo "############ tests pdi/paraconf done"




